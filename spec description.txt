Server stores "database" of accounts, with username and password, name, account number (searchable by), and list of transactions
(Perhaps an object that manages the "database"?)

Server stores session as files, named by SessionID number
Line 1: Timeout, in Unix time, made by (login time) + (5(?) minutes in ms)
Line 2: Corresponding account no. If client with valid SessionID makes a request with the wrong account no., the server shall delete this session file.
(Should server delete session files when expired, periodically, or not at all?)

Client stores session as a single file, same file name every time.
Line 1: SessionID
An ATM can only have one logged in user at a time.
If a new login event happens, the session file is overwritten
If an Invalid Login happens, the existing session file is deleted
Client does not keep track of time. It will happily send along a SessionID with any operation, even if the login was hours ago. The server will reject it correctly.
If the user runs the AMT program, but the session file either does not exist or is empty (need to code defensively to fail gracefully when it happens), what should it do? Either it fails without sending any request to the server, or it sends a request with SessionID=-1 and then lets the server send back an exception. Which one is better?

Interfaces shared between them:
Interface Statement
Interface Transaction (need to write ourselves!)

SessionID should be a long. Maybe it can just be: 10^10 <= Random long <= 10^15
